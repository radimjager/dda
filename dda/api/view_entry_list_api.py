# coding: utf-8

"""
    IBM Domino Data API

    The data API provides access to any database for which it is enabled. The API represents databases, views, view entries, and documents in JSON format.  **Important**: This version of the OpenAPI spec (**data.yaml**) includes data API changes from the XPages Extension Library release 9.0.1.v09_02. This  includes new operations on attachments, agents and forms.  If you are using a version before 9.0.1.v09_02, consider using an earlier version of the spec.   # noqa: E501

    OpenAPI spec version: 9.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dda.api_client import ApiClient


class ViewEntryListApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def folder_database_api_data_collections_name_view_name_get(self, folder, database, view_name, **kwargs):  # noqa: E501
        """Gets a list of view entries by view name.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_database_api_data_collections_name_view_name_get(folder, database, view_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Database folder name relative to the Domino data directory.  If the database is not in a folder, use `.` to specify the data directory itself.  (required)
        :param str database: Database file name. (required)
        :param str view_name: Name of a view or folder in the database. (required)
        :param int start: Specifies the starting entry. Defaults to 0 (the first entry). 
        :param int count: Specifies the number of entries to return. Defaults to 10. Note: Use `start` and `count` together, or use `ps` and  `page` together. 
        :param int page: Page number. The API returns entries based on a multiple of this parameter and the page size parameter (`ps`). 
        :param int ps: Page size or the number of entries to return. 
        :param bool entrycount: When `false`, disable the output of the `Content-Range` header as a performance optimization. The default value is `true`. 
        :param str search: Returns only documents that match a full-text query. An error occurs if the database is not full-text indexed. 
        :param int searchmaxdocs: Limits the number of documents returned by a full-text search. 
        :param str sortcolumn: Returns entries sorted on a column. If the column is not sorted by design or does not exist, this parameter has no effect. 
        :param str sortorder: Specifies the sort order. The parameter value should be either `ascending` or `descending`. Pair this parameter with `sortcolumn`. 
        :param str startkeys: Returns sorted entries starting at a specified entry. Pair this parameter with sortcolumn. Example: `?sortcolumn=Title&sortorder=ascending&startkeys=Document0020` 
        :param str keys: Returns entries whose initial characters match keys. Pair this parameter with sortcolumn. Example: `?sortcolumn=Title&sortorder=ascending&keys=Document001` 
        :param bool keysexactmatch: Returns entries that match keys exactly. Pair this parameter with keys. Example: `?sortcolumn=Title&sortorder=ascending&keys=Document001&keysexactmatch=true` 
        :param int expandlevel: Returns only entries at a specified indent level or higher. 
        :param str category: Returns only entries in a specified category. 
        :param str parentid: Returns only entries that are descendants of the specified entry UNID. Example: `parentid=9B8F4A02A5F5254E852578950064EC03` 
        :param int systemcolumns: Limits system data to `@entryid` plus a bit mask formed by adding bit  values from the response properties table. Use hexadecimal or decimal.  For example, `systemcolumns=0x80a` returns only `@entryid`, `@unid`,  `@read`, and `@href`. In decimal format, `systemcolumns=2058` has the  same effect. 
        :return: ViewEntryListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folder_database_api_data_collections_name_view_name_get_with_http_info(folder, database, view_name, **kwargs)  # noqa: E501
        else:
            (data) = self.folder_database_api_data_collections_name_view_name_get_with_http_info(folder, database, view_name, **kwargs)  # noqa: E501
            return data

    def folder_database_api_data_collections_name_view_name_get_with_http_info(self, folder, database, view_name, **kwargs):  # noqa: E501
        """Gets a list of view entries by view name.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_database_api_data_collections_name_view_name_get_with_http_info(folder, database, view_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Database folder name relative to the Domino data directory.  If the database is not in a folder, use `.` to specify the data directory itself.  (required)
        :param str database: Database file name. (required)
        :param str view_name: Name of a view or folder in the database. (required)
        :param int start: Specifies the starting entry. Defaults to 0 (the first entry). 
        :param int count: Specifies the number of entries to return. Defaults to 10. Note: Use `start` and `count` together, or use `ps` and  `page` together. 
        :param int page: Page number. The API returns entries based on a multiple of this parameter and the page size parameter (`ps`). 
        :param int ps: Page size or the number of entries to return. 
        :param bool entrycount: When `false`, disable the output of the `Content-Range` header as a performance optimization. The default value is `true`. 
        :param str search: Returns only documents that match a full-text query. An error occurs if the database is not full-text indexed. 
        :param int searchmaxdocs: Limits the number of documents returned by a full-text search. 
        :param str sortcolumn: Returns entries sorted on a column. If the column is not sorted by design or does not exist, this parameter has no effect. 
        :param str sortorder: Specifies the sort order. The parameter value should be either `ascending` or `descending`. Pair this parameter with `sortcolumn`. 
        :param str startkeys: Returns sorted entries starting at a specified entry. Pair this parameter with sortcolumn. Example: `?sortcolumn=Title&sortorder=ascending&startkeys=Document0020` 
        :param str keys: Returns entries whose initial characters match keys. Pair this parameter with sortcolumn. Example: `?sortcolumn=Title&sortorder=ascending&keys=Document001` 
        :param bool keysexactmatch: Returns entries that match keys exactly. Pair this parameter with keys. Example: `?sortcolumn=Title&sortorder=ascending&keys=Document001&keysexactmatch=true` 
        :param int expandlevel: Returns only entries at a specified indent level or higher. 
        :param str category: Returns only entries in a specified category. 
        :param str parentid: Returns only entries that are descendants of the specified entry UNID. Example: `parentid=9B8F4A02A5F5254E852578950064EC03` 
        :param int systemcolumns: Limits system data to `@entryid` plus a bit mask formed by adding bit  values from the response properties table. Use hexadecimal or decimal.  For example, `systemcolumns=0x80a` returns only `@entryid`, `@unid`,  `@read`, and `@href`. In decimal format, `systemcolumns=2058` has the  same effect. 
        :return: ViewEntryListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['folder', 'database', 'view_name', 'start', 'count', 'page', 'ps', 'entrycount', 'search', 'searchmaxdocs', 'sortcolumn', 'sortorder', 'startkeys', 'keys', 'keysexactmatch', 'expandlevel', 'category', 'parentid', 'systemcolumns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folder_database_api_data_collections_name_view_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'folder' is set
        if self.api_client.client_side_validation and ('folder' not in params or
                                                       params['folder'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `folder` when calling `folder_database_api_data_collections_name_view_name_get`")  # noqa: E501
        # verify the required parameter 'database' is set
        if self.api_client.client_side_validation and ('database' not in params or
                                                       params['database'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `database` when calling `folder_database_api_data_collections_name_view_name_get`")  # noqa: E501
        # verify the required parameter 'view_name' is set
        if self.api_client.client_side_validation and ('view_name' not in params or
                                                       params['view_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `view_name` when calling `folder_database_api_data_collections_name_view_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folder' in params:
            path_params['folder'] = params['folder']  # noqa: E501
        if 'database' in params:
            path_params['database'] = params['database']  # noqa: E501
        if 'view_name' in params:
            path_params['viewName'] = params['view_name']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'ps' in params:
            query_params.append(('ps', params['ps']))  # noqa: E501
        if 'entrycount' in params:
            query_params.append(('entrycount', params['entrycount']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'searchmaxdocs' in params:
            query_params.append(('searchmaxdocs', params['searchmaxdocs']))  # noqa: E501
        if 'sortcolumn' in params:
            query_params.append(('sortcolumn', params['sortcolumn']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'startkeys' in params:
            query_params.append(('startkeys', params['startkeys']))  # noqa: E501
        if 'keys' in params:
            query_params.append(('keys', params['keys']))  # noqa: E501
        if 'keysexactmatch' in params:
            query_params.append(('keysexactmatch', params['keysexactmatch']))  # noqa: E501
        if 'expandlevel' in params:
            query_params.append(('expandlevel', params['expandlevel']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
        if 'parentid' in params:
            query_params.append(('parentid', params['parentid']))  # noqa: E501
        if 'systemcolumns' in params:
            query_params.append(('systemcolumns', params['systemcolumns']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/{folder}/{database}/api/data/collections/name/{viewName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ViewEntryListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def folder_database_api_data_collections_unid_view_unid_get(self, folder, database, view_unid, **kwargs):  # noqa: E501
        """Gets a list of view entries by view UNID.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_database_api_data_collections_unid_view_unid_get(folder, database, view_unid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Database folder name relative to the Domino data directory.  If the database is not in a folder, use `.` to specify the data directory itself.  (required)
        :param str database: Database file name. (required)
        :param str view_unid: Universal ID of a view or folder in the database. (required)
        :param int start: Specifies the starting entry. Defaults to 0 (the first entry). 
        :param int count: Specifies the number of entries to return. Defaults to 10. Note: Use `start` and `count` together, or use `ps` and  `page` together. 
        :param int page: Page number. The API returns entries based on a multiple of this parameter and the page size parameter (`ps`). 
        :param int ps: Page size or the number of entries to return. 
        :param bool entrycount: When `false`, disable the output of the `Content-Range` header as a performance optimization. The default value is `true`. 
        :param str search: Returns only documents that match a full-text query. An error occurs if the database is not full-text indexed. 
        :param int searchmaxdocs: Limits the number of documents returned by a full-text search. 
        :param str sortcolumn: Returns entries sorted on a column. If the column is not sorted by design or does not exist, this parameter has no effect. 
        :param str sortorder: Specifies the sort order. The parameter value should be either `ascending` or `descending`. Pair this parameter with `sortcolumn`. 
        :param str startkeys: Returns sorted entries starting at a specified entry. Pair this parameter with sortcolumn. Example: `?sortcolumn=Title&sortorder=ascending&startkeys=Document0020` 
        :param str keys: Returns entries whose initial characters match keys. Pair this parameter with sortcolumn. Example: `?sortcolumn=Title&sortorder=ascending&keys=Document001` 
        :param bool keysexactmatch: Returns entries that match keys exactly. Pair this parameter with keys. Example: `?sortcolumn=Title&sortorder=ascending&keys=Document001&keysexactmatch=true` 
        :param int expandlevel: Returns only entries at a specified indent level or higher. 
        :param str category: Returns only entries in a specified category. 
        :param str parentid: Returns only entries that are descendants of the specified entry UNID. Example: `parentid=9B8F4A02A5F5254E852578950064EC03` 
        :param int systemcolumns: Limits system data to `@entryid` plus a bit mask formed by adding bit  values from the response properties table. Use hexadecimal or decimal.  For example, `systemcolumns=0x80a` returns only `@entryid`, `@unid`,  `@read`, and `@href`. In decimal format, `systemcolumns=2058` has the  same effect. 
        :return: ViewEntryListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folder_database_api_data_collections_unid_view_unid_get_with_http_info(folder, database, view_unid, **kwargs)  # noqa: E501
        else:
            (data) = self.folder_database_api_data_collections_unid_view_unid_get_with_http_info(folder, database, view_unid, **kwargs)  # noqa: E501
            return data

    def folder_database_api_data_collections_unid_view_unid_get_with_http_info(self, folder, database, view_unid, **kwargs):  # noqa: E501
        """Gets a list of view entries by view UNID.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_database_api_data_collections_unid_view_unid_get_with_http_info(folder, database, view_unid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Database folder name relative to the Domino data directory.  If the database is not in a folder, use `.` to specify the data directory itself.  (required)
        :param str database: Database file name. (required)
        :param str view_unid: Universal ID of a view or folder in the database. (required)
        :param int start: Specifies the starting entry. Defaults to 0 (the first entry). 
        :param int count: Specifies the number of entries to return. Defaults to 10. Note: Use `start` and `count` together, or use `ps` and  `page` together. 
        :param int page: Page number. The API returns entries based on a multiple of this parameter and the page size parameter (`ps`). 
        :param int ps: Page size or the number of entries to return. 
        :param bool entrycount: When `false`, disable the output of the `Content-Range` header as a performance optimization. The default value is `true`. 
        :param str search: Returns only documents that match a full-text query. An error occurs if the database is not full-text indexed. 
        :param int searchmaxdocs: Limits the number of documents returned by a full-text search. 
        :param str sortcolumn: Returns entries sorted on a column. If the column is not sorted by design or does not exist, this parameter has no effect. 
        :param str sortorder: Specifies the sort order. The parameter value should be either `ascending` or `descending`. Pair this parameter with `sortcolumn`. 
        :param str startkeys: Returns sorted entries starting at a specified entry. Pair this parameter with sortcolumn. Example: `?sortcolumn=Title&sortorder=ascending&startkeys=Document0020` 
        :param str keys: Returns entries whose initial characters match keys. Pair this parameter with sortcolumn. Example: `?sortcolumn=Title&sortorder=ascending&keys=Document001` 
        :param bool keysexactmatch: Returns entries that match keys exactly. Pair this parameter with keys. Example: `?sortcolumn=Title&sortorder=ascending&keys=Document001&keysexactmatch=true` 
        :param int expandlevel: Returns only entries at a specified indent level or higher. 
        :param str category: Returns only entries in a specified category. 
        :param str parentid: Returns only entries that are descendants of the specified entry UNID. Example: `parentid=9B8F4A02A5F5254E852578950064EC03` 
        :param int systemcolumns: Limits system data to `@entryid` plus a bit mask formed by adding bit  values from the response properties table. Use hexadecimal or decimal.  For example, `systemcolumns=0x80a` returns only `@entryid`, `@unid`,  `@read`, and `@href`. In decimal format, `systemcolumns=2058` has the  same effect. 
        :return: ViewEntryListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['folder', 'database', 'view_unid', 'start', 'count', 'page', 'ps', 'entrycount', 'search', 'searchmaxdocs', 'sortcolumn', 'sortorder', 'startkeys', 'keys', 'keysexactmatch', 'expandlevel', 'category', 'parentid', 'systemcolumns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folder_database_api_data_collections_unid_view_unid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'folder' is set
        if self.api_client.client_side_validation and ('folder' not in params or
                                                       params['folder'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `folder` when calling `folder_database_api_data_collections_unid_view_unid_get`")  # noqa: E501
        # verify the required parameter 'database' is set
        if self.api_client.client_side_validation and ('database' not in params or
                                                       params['database'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `database` when calling `folder_database_api_data_collections_unid_view_unid_get`")  # noqa: E501
        # verify the required parameter 'view_unid' is set
        if self.api_client.client_side_validation and ('view_unid' not in params or
                                                       params['view_unid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `view_unid` when calling `folder_database_api_data_collections_unid_view_unid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folder' in params:
            path_params['folder'] = params['folder']  # noqa: E501
        if 'database' in params:
            path_params['database'] = params['database']  # noqa: E501
        if 'view_unid' in params:
            path_params['viewUnid'] = params['view_unid']  # noqa: E501

        query_params = []
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'ps' in params:
            query_params.append(('ps', params['ps']))  # noqa: E501
        if 'entrycount' in params:
            query_params.append(('entrycount', params['entrycount']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'searchmaxdocs' in params:
            query_params.append(('searchmaxdocs', params['searchmaxdocs']))  # noqa: E501
        if 'sortcolumn' in params:
            query_params.append(('sortcolumn', params['sortcolumn']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'startkeys' in params:
            query_params.append(('startkeys', params['startkeys']))  # noqa: E501
        if 'keys' in params:
            query_params.append(('keys', params['keys']))  # noqa: E501
        if 'keysexactmatch' in params:
            query_params.append(('keysexactmatch', params['keysexactmatch']))  # noqa: E501
        if 'expandlevel' in params:
            query_params.append(('expandlevel', params['expandlevel']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
        if 'parentid' in params:
            query_params.append(('parentid', params['parentid']))  # noqa: E501
        if 'systemcolumns' in params:
            query_params.append(('systemcolumns', params['systemcolumns']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/{folder}/{database}/api/data/collections/unid/{viewUnid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ViewEntryListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
