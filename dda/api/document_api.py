# coding: utf-8

"""
    IBM Domino Data API

    The data API provides access to any database for which it is enabled. The API represents databases, views, view entries, and documents in JSON format.  **Important**: This version of the OpenAPI spec (**data.yaml**) includes data API changes from the XPages Extension Library release 9.0.1.v09_02. This  includes new operations on attachments, agents and forms.  If you are using a version before 9.0.1.v09_02, consider using an earlier version of the spec.   # noqa: E501

    OpenAPI spec version: 9.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from dda.api_client import ApiClient


class DocumentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def folder_database_api_data_documents_post(self, folder, database, document, **kwargs):  # noqa: E501
        """Creates a new document.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_database_api_data_documents_post(folder, database, document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Database folder name relative to the Domino data directory.  If the database is not in a folder, use `.` to specify the data directory itself.  (required)
        :param str database: Database file name. (required)
        :param Document document: The document to create. (required)
        :param str form: Associates a database form with the document. 
        :param bool computewithform: When `true`, runs the associated form formulas against the request data before posting the data. You must identify the form. 
        :param str parentid: Adds the document as a response to the document specified by the parent UNID. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folder_database_api_data_documents_post_with_http_info(folder, database, document, **kwargs)  # noqa: E501
        else:
            (data) = self.folder_database_api_data_documents_post_with_http_info(folder, database, document, **kwargs)  # noqa: E501
            return data

    def folder_database_api_data_documents_post_with_http_info(self, folder, database, document, **kwargs):  # noqa: E501
        """Creates a new document.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_database_api_data_documents_post_with_http_info(folder, database, document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Database folder name relative to the Domino data directory.  If the database is not in a folder, use `.` to specify the data directory itself.  (required)
        :param str database: Database file name. (required)
        :param Document document: The document to create. (required)
        :param str form: Associates a database form with the document. 
        :param bool computewithform: When `true`, runs the associated form formulas against the request data before posting the data. You must identify the form. 
        :param str parentid: Adds the document as a response to the document specified by the parent UNID. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['folder', 'database', 'document', 'form', 'computewithform', 'parentid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folder_database_api_data_documents_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'folder' is set
        if self.api_client.client_side_validation and ('folder' not in params or
                                                       params['folder'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `folder` when calling `folder_database_api_data_documents_post`")  # noqa: E501
        # verify the required parameter 'database' is set
        if self.api_client.client_side_validation and ('database' not in params or
                                                       params['database'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `database` when calling `folder_database_api_data_documents_post`")  # noqa: E501
        # verify the required parameter 'document' is set
        if self.api_client.client_side_validation and ('document' not in params or
                                                       params['document'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `document` when calling `folder_database_api_data_documents_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folder' in params:
            path_params['folder'] = params['folder']  # noqa: E501
        if 'database' in params:
            path_params['database'] = params['database']  # noqa: E501

        query_params = []
        if 'form' in params:
            query_params.append(('form', params['form']))  # noqa: E501
        if 'computewithform' in params:
            query_params.append(('computewithform', params['computewithform']))  # noqa: E501
        if 'parentid' in params:
            query_params.append(('parentid', params['parentid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'document' in params:
            body_params = params['document']
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/{folder}/{database}/api/data/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def folder_database_api_data_documents_unid_doc_unid_delete(self, folder, database, doc_unid, **kwargs):  # noqa: E501
        """Deletes a document.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_database_api_data_documents_unid_doc_unid_delete(folder, database, doc_unid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Database folder name relative to the Domino data directory.  If the database is not in a folder, use `.` to specify the data directory itself.  (required)
        :param str database: Database file name. (required)
        :param str doc_unid: Universal ID of the document. (required)
        :param str if_unmodified_since: Date and time in RFC 1123 time format (for example,  `Tue, 23 Aug 2011 21:35:18 GMT`) as previously returned in the  `Last-Modified` response header of a GET for the same document. The operation succeeds only if the document has not been modified since the specified date. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folder_database_api_data_documents_unid_doc_unid_delete_with_http_info(folder, database, doc_unid, **kwargs)  # noqa: E501
        else:
            (data) = self.folder_database_api_data_documents_unid_doc_unid_delete_with_http_info(folder, database, doc_unid, **kwargs)  # noqa: E501
            return data

    def folder_database_api_data_documents_unid_doc_unid_delete_with_http_info(self, folder, database, doc_unid, **kwargs):  # noqa: E501
        """Deletes a document.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_database_api_data_documents_unid_doc_unid_delete_with_http_info(folder, database, doc_unid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Database folder name relative to the Domino data directory.  If the database is not in a folder, use `.` to specify the data directory itself.  (required)
        :param str database: Database file name. (required)
        :param str doc_unid: Universal ID of the document. (required)
        :param str if_unmodified_since: Date and time in RFC 1123 time format (for example,  `Tue, 23 Aug 2011 21:35:18 GMT`) as previously returned in the  `Last-Modified` response header of a GET for the same document. The operation succeeds only if the document has not been modified since the specified date. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['folder', 'database', 'doc_unid', 'if_unmodified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folder_database_api_data_documents_unid_doc_unid_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'folder' is set
        if self.api_client.client_side_validation and ('folder' not in params or
                                                       params['folder'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `folder` when calling `folder_database_api_data_documents_unid_doc_unid_delete`")  # noqa: E501
        # verify the required parameter 'database' is set
        if self.api_client.client_side_validation and ('database' not in params or
                                                       params['database'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `database` when calling `folder_database_api_data_documents_unid_doc_unid_delete`")  # noqa: E501
        # verify the required parameter 'doc_unid' is set
        if self.api_client.client_side_validation and ('doc_unid' not in params or
                                                       params['doc_unid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `doc_unid` when calling `folder_database_api_data_documents_unid_doc_unid_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folder' in params:
            path_params['folder'] = params['folder']  # noqa: E501
        if 'database' in params:
            path_params['database'] = params['database']  # noqa: E501
        if 'doc_unid' in params:
            path_params['docUnid'] = params['doc_unid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_unmodified_since' in params:
            header_params['If-Unmodified-Since'] = params['if_unmodified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/{folder}/{database}/api/data/documents/unid/{docUnid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def folder_database_api_data_documents_unid_doc_unid_get(self, folder, database, doc_unid, **kwargs):  # noqa: E501
        """Reads a document.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_database_api_data_documents_unid_doc_unid_get(folder, database, doc_unid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Database folder name relative to the Domino data directory.  If the database is not in a folder, use `.` to specify the data directory itself.  (required)
        :param str database: Database file name. (required)
        :param str doc_unid: Universal ID of the document. (required)
        :param bool hidden: When `true`, emits hidden properties.  Hidden properties have names beginning with `$`, for example, `\"$UpdatedBy\":\"CN=Admin/O=Your Org\"`. 
        :param bool multipart: When `false`, formats rich text as a single HTML part rather than multipart. The default value is `true`. 
        :param bool strongtype: When `true`, displays date-time items as objects with type and data elements. See the examples. Rich text items always use strongtype format. 
        :param bool lowercasefields: When `true`, the reponse property names are all lower case. For example, a document item called `FirstName` is represented as `firstname` in the JSON response.  This parameter can help resolve issues caused by inconsistent naming of items across documents  (`FirstName` in one document and `FIRSTNAME` in another.) 
        :param str fields: Specifies the list of fields expected in the response.  For example, `fields=FirstName,LastName` limits the JSON response to items matching those field names.  If the document includes items named `EMail` and  `Photo`, they are not included in the response.  Use this parameter to limit the size of the response. 
        :param bool markread: When `false`, the document is not marked read for the authenticated user.  When `true`, the document is marked read.  When this parameter is omitted, the default value is `true`. 
        :param bool attachmentlinks: When `true`, the response includes a link to each attachment instead of the attachment data itself.  You can access the attachment as a separate resource.  This parameter (`attachmentlinks=true`) is mutually exclusive with `multipart=false`. 
        :param str if_modified_since: Date and time in RFC 1123 time format (for example,  `Tue, 23 Aug 2011 21:35:18 GMT`) as previously returned in the  `Last-Modified` response header of a GET for the same document. The operation succeeds only if the document has been modified since the specified date. 
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folder_database_api_data_documents_unid_doc_unid_get_with_http_info(folder, database, doc_unid, **kwargs)  # noqa: E501
        else:
            (data) = self.folder_database_api_data_documents_unid_doc_unid_get_with_http_info(folder, database, doc_unid, **kwargs)  # noqa: E501
            return data

    def folder_database_api_data_documents_unid_doc_unid_get_with_http_info(self, folder, database, doc_unid, **kwargs):  # noqa: E501
        """Reads a document.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_database_api_data_documents_unid_doc_unid_get_with_http_info(folder, database, doc_unid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Database folder name relative to the Domino data directory.  If the database is not in a folder, use `.` to specify the data directory itself.  (required)
        :param str database: Database file name. (required)
        :param str doc_unid: Universal ID of the document. (required)
        :param bool hidden: When `true`, emits hidden properties.  Hidden properties have names beginning with `$`, for example, `\"$UpdatedBy\":\"CN=Admin/O=Your Org\"`. 
        :param bool multipart: When `false`, formats rich text as a single HTML part rather than multipart. The default value is `true`. 
        :param bool strongtype: When `true`, displays date-time items as objects with type and data elements. See the examples. Rich text items always use strongtype format. 
        :param bool lowercasefields: When `true`, the reponse property names are all lower case. For example, a document item called `FirstName` is represented as `firstname` in the JSON response.  This parameter can help resolve issues caused by inconsistent naming of items across documents  (`FirstName` in one document and `FIRSTNAME` in another.) 
        :param str fields: Specifies the list of fields expected in the response.  For example, `fields=FirstName,LastName` limits the JSON response to items matching those field names.  If the document includes items named `EMail` and  `Photo`, they are not included in the response.  Use this parameter to limit the size of the response. 
        :param bool markread: When `false`, the document is not marked read for the authenticated user.  When `true`, the document is marked read.  When this parameter is omitted, the default value is `true`. 
        :param bool attachmentlinks: When `true`, the response includes a link to each attachment instead of the attachment data itself.  You can access the attachment as a separate resource.  This parameter (`attachmentlinks=true`) is mutually exclusive with `multipart=false`. 
        :param str if_modified_since: Date and time in RFC 1123 time format (for example,  `Tue, 23 Aug 2011 21:35:18 GMT`) as previously returned in the  `Last-Modified` response header of a GET for the same document. The operation succeeds only if the document has been modified since the specified date. 
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['folder', 'database', 'doc_unid', 'hidden', 'multipart', 'strongtype', 'lowercasefields', 'fields', 'markread', 'attachmentlinks', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folder_database_api_data_documents_unid_doc_unid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'folder' is set
        if self.api_client.client_side_validation and ('folder' not in params or
                                                       params['folder'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `folder` when calling `folder_database_api_data_documents_unid_doc_unid_get`")  # noqa: E501
        # verify the required parameter 'database' is set
        if self.api_client.client_side_validation and ('database' not in params or
                                                       params['database'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `database` when calling `folder_database_api_data_documents_unid_doc_unid_get`")  # noqa: E501
        # verify the required parameter 'doc_unid' is set
        if self.api_client.client_side_validation and ('doc_unid' not in params or
                                                       params['doc_unid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `doc_unid` when calling `folder_database_api_data_documents_unid_doc_unid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folder' in params:
            path_params['folder'] = params['folder']  # noqa: E501
        if 'database' in params:
            path_params['database'] = params['database']  # noqa: E501
        if 'doc_unid' in params:
            path_params['docUnid'] = params['doc_unid']  # noqa: E501

        query_params = []
        if 'hidden' in params:
            query_params.append(('hidden', params['hidden']))  # noqa: E501
        if 'multipart' in params:
            query_params.append(('multipart', params['multipart']))  # noqa: E501
        if 'strongtype' in params:
            query_params.append(('strongtype', params['strongtype']))  # noqa: E501
        if 'lowercasefields' in params:
            query_params.append(('lowercasefields', params['lowercasefields']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'markread' in params:
            query_params.append(('markread', params['markread']))  # noqa: E501
        if 'attachmentlinks' in params:
            query_params.append(('attachmentlinks', params['attachmentlinks']))  # noqa: E501

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/{folder}/{database}/api/data/documents/unid/{docUnid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def folder_database_api_data_documents_unid_doc_unid_patch(self, folder, database, doc_unid, document, **kwargs):  # noqa: E501
        """Updates selected items in a document.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_database_api_data_documents_unid_doc_unid_patch(folder, database, doc_unid, document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Database folder name relative to the Domino data directory.  If the database is not in a folder, use `.` to specify the data directory itself.  (required)
        :param str database: Database file name. (required)
        :param str doc_unid: Universal ID of the document. (required)
        :param Document document: The document properties to update. (required)
        :param str form: Associates a database form with the document. 
        :param bool computewithform: When `true`, runs the associated form formulas against the request data before posting the data. You must identify the form. 
        :param str if_unmodified_since: Date and time in RFC 1123 time format (for example,  `Tue, 23 Aug 2011 21:35:18 GMT`) as previously returned in the  `Last-Modified` response header of a GET for the same document. The operation succeeds only if the document has not been modified since the specified date. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folder_database_api_data_documents_unid_doc_unid_patch_with_http_info(folder, database, doc_unid, document, **kwargs)  # noqa: E501
        else:
            (data) = self.folder_database_api_data_documents_unid_doc_unid_patch_with_http_info(folder, database, doc_unid, document, **kwargs)  # noqa: E501
            return data

    def folder_database_api_data_documents_unid_doc_unid_patch_with_http_info(self, folder, database, doc_unid, document, **kwargs):  # noqa: E501
        """Updates selected items in a document.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_database_api_data_documents_unid_doc_unid_patch_with_http_info(folder, database, doc_unid, document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Database folder name relative to the Domino data directory.  If the database is not in a folder, use `.` to specify the data directory itself.  (required)
        :param str database: Database file name. (required)
        :param str doc_unid: Universal ID of the document. (required)
        :param Document document: The document properties to update. (required)
        :param str form: Associates a database form with the document. 
        :param bool computewithform: When `true`, runs the associated form formulas against the request data before posting the data. You must identify the form. 
        :param str if_unmodified_since: Date and time in RFC 1123 time format (for example,  `Tue, 23 Aug 2011 21:35:18 GMT`) as previously returned in the  `Last-Modified` response header of a GET for the same document. The operation succeeds only if the document has not been modified since the specified date. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['folder', 'database', 'doc_unid', 'document', 'form', 'computewithform', 'if_unmodified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folder_database_api_data_documents_unid_doc_unid_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'folder' is set
        if self.api_client.client_side_validation and ('folder' not in params or
                                                       params['folder'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `folder` when calling `folder_database_api_data_documents_unid_doc_unid_patch`")  # noqa: E501
        # verify the required parameter 'database' is set
        if self.api_client.client_side_validation and ('database' not in params or
                                                       params['database'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `database` when calling `folder_database_api_data_documents_unid_doc_unid_patch`")  # noqa: E501
        # verify the required parameter 'doc_unid' is set
        if self.api_client.client_side_validation and ('doc_unid' not in params or
                                                       params['doc_unid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `doc_unid` when calling `folder_database_api_data_documents_unid_doc_unid_patch`")  # noqa: E501
        # verify the required parameter 'document' is set
        if self.api_client.client_side_validation and ('document' not in params or
                                                       params['document'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `document` when calling `folder_database_api_data_documents_unid_doc_unid_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folder' in params:
            path_params['folder'] = params['folder']  # noqa: E501
        if 'database' in params:
            path_params['database'] = params['database']  # noqa: E501
        if 'doc_unid' in params:
            path_params['docUnid'] = params['doc_unid']  # noqa: E501

        query_params = []
        if 'form' in params:
            query_params.append(('form', params['form']))  # noqa: E501
        if 'computewithform' in params:
            query_params.append(('computewithform', params['computewithform']))  # noqa: E501

        header_params = {}
        if 'if_unmodified_since' in params:
            header_params['If-Unmodified-Since'] = params['if_unmodified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'document' in params:
            body_params = params['document']
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/{folder}/{database}/api/data/documents/unid/{docUnid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def folder_database_api_data_documents_unid_doc_unid_put(self, folder, database, doc_unid, document, **kwargs):  # noqa: E501
        """Replaces all items in a document.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_database_api_data_documents_unid_doc_unid_put(folder, database, doc_unid, document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Database folder name relative to the Domino data directory.  If the database is not in a folder, use `.` to specify the data directory itself.  (required)
        :param str database: Database file name. (required)
        :param str doc_unid: Universal ID of the document. (required)
        :param Document document: The document properties to update. (required)
        :param str form: Associates a database form with the document. 
        :param bool computewithform: When `true`, runs the associated form formulas against the request data before posting the data. You must identify the form. 
        :param str if_unmodified_since: Date and time in RFC 1123 time format (for example,  `Tue, 23 Aug 2011 21:35:18 GMT`) as previously returned in the  `Last-Modified` response header of a GET for the same document. The operation succeeds only if the document has not been modified since the specified date. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.folder_database_api_data_documents_unid_doc_unid_put_with_http_info(folder, database, doc_unid, document, **kwargs)  # noqa: E501
        else:
            (data) = self.folder_database_api_data_documents_unid_doc_unid_put_with_http_info(folder, database, doc_unid, document, **kwargs)  # noqa: E501
            return data

    def folder_database_api_data_documents_unid_doc_unid_put_with_http_info(self, folder, database, doc_unid, document, **kwargs):  # noqa: E501
        """Replaces all items in a document.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.folder_database_api_data_documents_unid_doc_unid_put_with_http_info(folder, database, doc_unid, document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Database folder name relative to the Domino data directory.  If the database is not in a folder, use `.` to specify the data directory itself.  (required)
        :param str database: Database file name. (required)
        :param str doc_unid: Universal ID of the document. (required)
        :param Document document: The document properties to update. (required)
        :param str form: Associates a database form with the document. 
        :param bool computewithform: When `true`, runs the associated form formulas against the request data before posting the data. You must identify the form. 
        :param str if_unmodified_since: Date and time in RFC 1123 time format (for example,  `Tue, 23 Aug 2011 21:35:18 GMT`) as previously returned in the  `Last-Modified` response header of a GET for the same document. The operation succeeds only if the document has not been modified since the specified date. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['folder', 'database', 'doc_unid', 'document', 'form', 'computewithform', 'if_unmodified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method folder_database_api_data_documents_unid_doc_unid_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'folder' is set
        if self.api_client.client_side_validation and ('folder' not in params or
                                                       params['folder'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `folder` when calling `folder_database_api_data_documents_unid_doc_unid_put`")  # noqa: E501
        # verify the required parameter 'database' is set
        if self.api_client.client_side_validation and ('database' not in params or
                                                       params['database'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `database` when calling `folder_database_api_data_documents_unid_doc_unid_put`")  # noqa: E501
        # verify the required parameter 'doc_unid' is set
        if self.api_client.client_side_validation and ('doc_unid' not in params or
                                                       params['doc_unid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `doc_unid` when calling `folder_database_api_data_documents_unid_doc_unid_put`")  # noqa: E501
        # verify the required parameter 'document' is set
        if self.api_client.client_side_validation and ('document' not in params or
                                                       params['document'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `document` when calling `folder_database_api_data_documents_unid_doc_unid_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folder' in params:
            path_params['folder'] = params['folder']  # noqa: E501
        if 'database' in params:
            path_params['database'] = params['database']  # noqa: E501
        if 'doc_unid' in params:
            path_params['docUnid'] = params['doc_unid']  # noqa: E501

        query_params = []
        if 'form' in params:
            query_params.append(('form', params['form']))  # noqa: E501
        if 'computewithform' in params:
            query_params.append(('computewithform', params['computewithform']))  # noqa: E501

        header_params = {}
        if 'if_unmodified_since' in params:
            header_params['If-Unmodified-Since'] = params['if_unmodified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'document' in params:
            body_params = params['document']
        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/{folder}/{database}/api/data/documents/unid/{docUnid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
