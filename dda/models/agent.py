# coding: utf-8

"""
    IBM Domino Data API

    The data API provides access to any database for which it is enabled. The API represents databases, views, view entries, and documents in JSON format.  **Important**: This version of the OpenAPI spec (**data.yaml**) includes data API changes from the XPages Extension Library release 9.0.1.v09_02. This  includes new operations on attachments, agents and forms.  If you are using a version before 9.0.1.v09_02, consider using an earlier version of the spec.   # noqa: E501

    OpenAPI spec version: 9.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dda.configuration import Configuration


class Agent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'href': 'str',
        'trigger': 'str',
        'target': 'str',
        'enabled': 'bool',
        'last_run': 'str',
        'server_name': 'str'
    }

    attribute_map = {
        'name': 'name',
        'href': 'href',
        'trigger': 'trigger',
        'target': 'target',
        'enabled': 'enabled',
        'last_run': 'lastRun',
        'server_name': 'serverName'
    }

    def __init__(self, name=None, href=None, trigger=None, target=None, enabled=None, last_run=None, server_name=None, _configuration=None):  # noqa: E501
        """Agent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._href = None
        self._trigger = None
        self._target = None
        self._enabled = None
        self._last_run = None
        self._server_name = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if href is not None:
            self.href = href
        if trigger is not None:
            self.trigger = trigger
        if target is not None:
            self.target = target
        if enabled is not None:
            self.enabled = enabled
        if last_run is not None:
            self.last_run = last_run
        if server_name is not None:
            self.server_name = server_name

    @property
    def name(self):
        """Gets the name of this Agent.  # noqa: E501

        The name of the agent.  # noqa: E501

        :return: The name of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Agent.

        The name of the agent.  # noqa: E501

        :param name: The name of this Agent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def href(self):
        """Gets the href of this Agent.  # noqa: E501

        The URL of the agent resource.  # noqa: E501

        :return: The href of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Agent.

        The URL of the agent resource.  # noqa: E501

        :param href: The href of this Agent.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def trigger(self):
        """Gets the trigger of this Agent.  # noqa: E501

        The agent trigger.  # noqa: E501

        :return: The trigger of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this Agent.

        The agent trigger.  # noqa: E501

        :param trigger: The trigger of this Agent.  # noqa: E501
        :type: str
        """

        self._trigger = trigger

    @property
    def target(self):
        """Gets the target of this Agent.  # noqa: E501

        The agent target (if applicable).  # noqa: E501

        :return: The target of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Agent.

        The agent target (if applicable).  # noqa: E501

        :param target: The target of this Agent.  # noqa: E501
        :type: str
        """

        self._target = target

    @property
    def enabled(self):
        """Gets the enabled of this Agent.  # noqa: E501

        `true` if the agent is enabled.   # noqa: E501

        :return: The enabled of this Agent.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Agent.

        `true` if the agent is enabled.   # noqa: E501

        :param enabled: The enabled of this Agent.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def last_run(self):
        """Gets the last_run of this Agent.  # noqa: E501

        The date and time the agent was last executed.  # noqa: E501

        :return: The last_run of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._last_run

    @last_run.setter
    def last_run(self, last_run):
        """Sets the last_run of this Agent.

        The date and time the agent was last executed.  # noqa: E501

        :param last_run: The last_run of this Agent.  # noqa: E501
        :type: str
        """

        self._last_run = last_run

    @property
    def server_name(self):
        """Gets the server_name of this Agent.  # noqa: E501

        The name of the server on which the agent was last executed.  # noqa: E501

        :return: The server_name of this Agent.  # noqa: E501
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this Agent.

        The name of the server on which the agent was last executed.  # noqa: E501

        :param server_name: The server_name of this Agent.  # noqa: E501
        :type: str
        """

        self._server_name = server_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Agent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Agent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Agent):
            return True

        return self.to_dict() != other.to_dict()
