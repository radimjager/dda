# coding: utf-8

"""
    IBM Domino Data API

    The data API provides access to any database for which it is enabled. The API represents databases, views, view entries, and documents in JSON format.  **Important**: This version of the OpenAPI spec (**data.yaml**) includes data API changes from the XPages Extension Library release 9.0.1.v09_02. This  includes new operations on attachments, agents and forms.  If you are using a version before 9.0.1.v09_02, consider using an earlier version of the spec.   # noqa: E501

    OpenAPI spec version: 9.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dda.configuration import Configuration


class Document(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'str',
        'modified': 'str',
        'unid': 'str',
        'noteid': 'str',
        'href': 'str',
        'form': 'str'
    }

    attribute_map = {
        'created': '@created',
        'modified': '@modified',
        'unid': '@unid',
        'noteid': '@noteid',
        'href': '@href',
        'form': '@form'
    }

    def __init__(self, created=None, modified=None, unid=None, noteid=None, href=None, form=None, _configuration=None):  # noqa: E501
        """Document - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created = None
        self._modified = None
        self._unid = None
        self._noteid = None
        self._href = None
        self._form = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        if unid is not None:
            self.unid = unid
        if noteid is not None:
            self.noteid = noteid
        if href is not None:
            self.href = href
        if form is not None:
            self.form = form

    @property
    def created(self):
        """Gets the created of this Document.  # noqa: E501

        The date the document was created.  # noqa: E501

        :return: The created of this Document.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Document.

        The date the document was created.  # noqa: E501

        :param created: The created of this Document.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this Document.  # noqa: E501

        The last modification date of the document.  # noqa: E501

        :return: The modified of this Document.  # noqa: E501
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Document.

        The last modification date of the document.  # noqa: E501

        :param modified: The modified of this Document.  # noqa: E501
        :type: str
        """

        self._modified = modified

    @property
    def unid(self):
        """Gets the unid of this Document.  # noqa: E501

        The universal ID of the document.  # noqa: E501

        :return: The unid of this Document.  # noqa: E501
        :rtype: str
        """
        return self._unid

    @unid.setter
    def unid(self, unid):
        """Sets the unid of this Document.

        The universal ID of the document.  # noqa: E501

        :param unid: The unid of this Document.  # noqa: E501
        :type: str
        """

        self._unid = unid

    @property
    def noteid(self):
        """Gets the noteid of this Document.  # noqa: E501

        The note ID of the document.  # noqa: E501

        :return: The noteid of this Document.  # noqa: E501
        :rtype: str
        """
        return self._noteid

    @noteid.setter
    def noteid(self, noteid):
        """Sets the noteid of this Document.

        The note ID of the document.  # noqa: E501

        :param noteid: The noteid of this Document.  # noqa: E501
        :type: str
        """

        self._noteid = noteid

    @property
    def href(self):
        """Gets the href of this Document.  # noqa: E501

        The URL of the Document resource.  # noqa: E501

        :return: The href of this Document.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Document.

        The URL of the Document resource.  # noqa: E501

        :param href: The href of this Document.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def form(self):
        """Gets the form of this Document.  # noqa: E501

        The name of the form used to create the document.  # noqa: E501

        :return: The form of this Document.  # noqa: E501
        :rtype: str
        """
        return self._form

    @form.setter
    def form(self, form):
        """Sets the form of this Document.

        The name of the form used to create the document.  # noqa: E501

        :param form: The form of this Document.  # noqa: E501
        :type: str
        """

        self._form = form

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Document, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Document):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Document):
            return True

        return self.to_dict() != other.to_dict()
