# coding: utf-8

"""
    IBM Domino Data API

    The data API provides access to any database for which it is enabled. The API represents databases, views, view entries, and documents in JSON format.  **Important**: This version of the OpenAPI spec (**data.yaml**) includes data API changes from the XPages Extension Library release 9.0.1.v09_02. This  includes new operations on attachments, agents and forms.  If you are using a version before 9.0.1.v09_02, consider using an earlier version of the spec.   # noqa: E501

    OpenAPI spec version: 9.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dda.configuration import Configuration


class ViewEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entryid': 'str',
        'noteid': 'str',
        'unid': 'str',
        'position': 'str',
        'read': 'bool',
        'siblings': 'int',
        'descendants': 'int',
        'children': 'int',
        'indent': 'int',
        'form': 'str',
        'category': 'bool',
        'response': 'bool',
        'href': 'str',
        'link': 'Link',
        'score': 'int'
    }

    attribute_map = {
        'entryid': '@entryid',
        'noteid': '@noteid',
        'unid': '@unid',
        'position': '@position',
        'read': '@read',
        'siblings': '@siblings',
        'descendants': '@descendants',
        'children': '@children',
        'indent': '@indent',
        'form': '@form',
        'category': '@category',
        'response': '@response',
        'href': '@href',
        'link': '@link',
        'score': '@score'
    }

    def __init__(self, entryid=None, noteid=None, unid=None, position=None, read=None, siblings=None, descendants=None, children=None, indent=None, form=None, category=None, response=None, href=None, link=None, score=None, _configuration=None):  # noqa: E501
        """ViewEntry - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._entryid = None
        self._noteid = None
        self._unid = None
        self._position = None
        self._read = None
        self._siblings = None
        self._descendants = None
        self._children = None
        self._indent = None
        self._form = None
        self._category = None
        self._response = None
        self._href = None
        self._link = None
        self._score = None
        self.discriminator = None

        if entryid is not None:
            self.entryid = entryid
        if noteid is not None:
            self.noteid = noteid
        if unid is not None:
            self.unid = unid
        if position is not None:
            self.position = position
        if read is not None:
            self.read = read
        if siblings is not None:
            self.siblings = siblings
        if descendants is not None:
            self.descendants = descendants
        if children is not None:
            self.children = children
        if indent is not None:
            self.indent = indent
        if form is not None:
            self.form = form
        if category is not None:
            self.category = category
        if response is not None:
            self.response = response
        if href is not None:
            self.href = href
        if link is not None:
            self.link = link
        if score is not None:
            self.score = score

    @property
    def entryid(self):
        """Gets the entryid of this ViewEntry.  # noqa: E501

        Position of the entry in the view or folder and the universal ID of any associated document.   # noqa: E501

        :return: The entryid of this ViewEntry.  # noqa: E501
        :rtype: str
        """
        return self._entryid

    @entryid.setter
    def entryid(self, entryid):
        """Sets the entryid of this ViewEntry.

        Position of the entry in the view or folder and the universal ID of any associated document.   # noqa: E501

        :param entryid: The entryid of this ViewEntry.  # noqa: E501
        :type: str
        """

        self._entryid = entryid

    @property
    def noteid(self):
        """Gets the noteid of this ViewEntry.  # noqa: E501

        The note ID of the document associated with the entry, or an empty string if the entry is a category or total (systemcolumns bit 0x0001).   # noqa: E501

        :return: The noteid of this ViewEntry.  # noqa: E501
        :rtype: str
        """
        return self._noteid

    @noteid.setter
    def noteid(self, noteid):
        """Sets the noteid of this ViewEntry.

        The note ID of the document associated with the entry, or an empty string if the entry is a category or total (systemcolumns bit 0x0001).   # noqa: E501

        :param noteid: The noteid of this ViewEntry.  # noqa: E501
        :type: str
        """

        self._noteid = noteid

    @property
    def unid(self):
        """Gets the unid of this ViewEntry.  # noqa: E501

        The universal ID of the document associated with the entry,  or an empty string if the entry is a category or total (systemcolumns bit 0x0002).   # noqa: E501

        :return: The unid of this ViewEntry.  # noqa: E501
        :rtype: str
        """
        return self._unid

    @unid.setter
    def unid(self, unid):
        """Sets the unid of this ViewEntry.

        The universal ID of the document associated with the entry,  or an empty string if the entry is a category or total (systemcolumns bit 0x0002).   # noqa: E501

        :param unid: The unid of this ViewEntry.  # noqa: E501
        :type: str
        """

        self._unid = unid

    @property
    def position(self):
        """Gets the position of this ViewEntry.  # noqa: E501

        Position of the entry in the view or folder (systemcolumns bit 0x0004).   # noqa: E501

        :return: The position of this ViewEntry.  # noqa: E501
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ViewEntry.

        Position of the entry in the view or folder (systemcolumns bit 0x0004).   # noqa: E501

        :param position: The position of this ViewEntry.  # noqa: E501
        :type: str
        """

        self._position = position

    @property
    def read(self):
        """Gets the read of this ViewEntry.  # noqa: E501

        `true` if the entry is marked read for the user (systemcolumns bit 0x0008).   # noqa: E501

        :return: The read of this ViewEntry.  # noqa: E501
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this ViewEntry.

        `true` if the entry is marked read for the user (systemcolumns bit 0x0008).   # noqa: E501

        :param read: The read of this ViewEntry.  # noqa: E501
        :type: bool
        """

        self._read = read

    @property
    def siblings(self):
        """Gets the siblings of this ViewEntry.  # noqa: E501

        The number of siblings of the entry (systemcolumns bit 0x0010).   # noqa: E501

        :return: The siblings of this ViewEntry.  # noqa: E501
        :rtype: int
        """
        return self._siblings

    @siblings.setter
    def siblings(self, siblings):
        """Sets the siblings of this ViewEntry.

        The number of siblings of the entry (systemcolumns bit 0x0010).   # noqa: E501

        :param siblings: The siblings of this ViewEntry.  # noqa: E501
        :type: int
        """

        self._siblings = siblings

    @property
    def descendants(self):
        """Gets the descendants of this ViewEntry.  # noqa: E501

        The number of descendants of the entry (systemcolumns bit 0x0020).   # noqa: E501

        :return: The descendants of this ViewEntry.  # noqa: E501
        :rtype: int
        """
        return self._descendants

    @descendants.setter
    def descendants(self, descendants):
        """Sets the descendants of this ViewEntry.

        The number of descendants of the entry (systemcolumns bit 0x0020).   # noqa: E501

        :param descendants: The descendants of this ViewEntry.  # noqa: E501
        :type: int
        """

        self._descendants = descendants

    @property
    def children(self):
        """Gets the children of this ViewEntry.  # noqa: E501

        The number of children of the entry (systemcolumns bit 0x0040).   # noqa: E501

        :return: The children of this ViewEntry.  # noqa: E501
        :rtype: int
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this ViewEntry.

        The number of children of the entry (systemcolumns bit 0x0040).   # noqa: E501

        :param children: The children of this ViewEntry.  # noqa: E501
        :type: int
        """

        self._children = children

    @property
    def indent(self):
        """Gets the indent of this ViewEntry.  # noqa: E501

        The indent level of the entry (systemcolumns bit 0x0080).   # noqa: E501

        :return: The indent of this ViewEntry.  # noqa: E501
        :rtype: int
        """
        return self._indent

    @indent.setter
    def indent(self, indent):
        """Sets the indent of this ViewEntry.

        The indent level of the entry (systemcolumns bit 0x0080).   # noqa: E501

        :param indent: The indent of this ViewEntry.  # noqa: E501
        :type: int
        """

        self._indent = indent

    @property
    def form(self):
        """Gets the form of this ViewEntry.  # noqa: E501

        The form upon which the document is based (systemcolumns bit 0x0100).   # noqa: E501

        :return: The form of this ViewEntry.  # noqa: E501
        :rtype: str
        """
        return self._form

    @form.setter
    def form(self, form):
        """Sets the form of this ViewEntry.

        The form upon which the document is based (systemcolumns bit 0x0100).   # noqa: E501

        :param form: The form of this ViewEntry.  # noqa: E501
        :type: str
        """

        self._form = form

    @property
    def category(self):
        """Gets the category of this ViewEntry.  # noqa: E501

        `true` if the entry is a category (systemcolumns bit 0x0200).   # noqa: E501

        :return: The category of this ViewEntry.  # noqa: E501
        :rtype: bool
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ViewEntry.

        `true` if the entry is a category (systemcolumns bit 0x0200).   # noqa: E501

        :param category: The category of this ViewEntry.  # noqa: E501
        :type: bool
        """

        self._category = category

    @property
    def response(self):
        """Gets the response of this ViewEntry.  # noqa: E501

        `true` if the entry is a response (systemcolumns bit 0x0400).   # noqa: E501

        :return: The response of this ViewEntry.  # noqa: E501
        :rtype: bool
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this ViewEntry.

        `true` if the entry is a response (systemcolumns bit 0x0400).   # noqa: E501

        :param response: The response of this ViewEntry.  # noqa: E501
        :type: bool
        """

        self._response = response

    @property
    def href(self):
        """Gets the href of this ViewEntry.  # noqa: E501

        URL for the entry (systemcolumns bit 0x0800).   # noqa: E501

        :return: The href of this ViewEntry.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ViewEntry.

        URL for the entry (systemcolumns bit 0x0800).   # noqa: E501

        :param href: The href of this ViewEntry.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def link(self):
        """Gets the link of this ViewEntry.  # noqa: E501


        :return: The link of this ViewEntry.  # noqa: E501
        :rtype: Link
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ViewEntry.


        :param link: The link of this ViewEntry.  # noqa: E501
        :type: Link
        """

        self._link = link

    @property
    def score(self):
        """Gets the score of this ViewEntry.  # noqa: E501

        The search score if this entry is in a search response (systemcolumns bit 0x2000).   # noqa: E501

        :return: The score of this ViewEntry.  # noqa: E501
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ViewEntry.

        The search score if this entry is in a search response (systemcolumns bit 0x2000).   # noqa: E501

        :param score: The score of this ViewEntry.  # noqa: E501
        :type: int
        """

        self._score = score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ViewEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ViewEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ViewEntry):
            return True

        return self.to_dict() != other.to_dict()
