# coding: utf-8

"""
    IBM Domino Data API

    The data API provides access to any database for which it is enabled. The API represents databases, views, view entries, and documents in JSON format.  **Important**: This version of the OpenAPI spec (**data.yaml**) includes data API changes from the XPages Extension Library release 9.0.1.v09_02. This  includes new operations on attachments, agents and forms.  If you are using a version before 9.0.1.v09_02, consider using an earlier version of the spec.   # noqa: E501

    OpenAPI spec version: 9.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dda.configuration import Configuration


class Database(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'filepath': 'str',
        'replicaid': 'str',
        'template': 'str',
        'href': 'str'
    }

    attribute_map = {
        'title': '@title',
        'filepath': '@filepath',
        'replicaid': '@replicaid',
        'template': '@template',
        'href': '@href'
    }

    def __init__(self, title=None, filepath=None, replicaid=None, template=None, href=None, _configuration=None):  # noqa: E501
        """Database - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._title = None
        self._filepath = None
        self._replicaid = None
        self._template = None
        self._href = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if filepath is not None:
            self.filepath = filepath
        if replicaid is not None:
            self.replicaid = replicaid
        if template is not None:
            self.template = template
        if href is not None:
            self.href = href

    @property
    def title(self):
        """Gets the title of this Database.  # noqa: E501

        Title of the database.  # noqa: E501

        :return: The title of this Database.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Database.

        Title of the database.  # noqa: E501

        :param title: The title of this Database.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def filepath(self):
        """Gets the filepath of this Database.  # noqa: E501

        File path of the database relative to the Domino data directory.  # noqa: E501

        :return: The filepath of this Database.  # noqa: E501
        :rtype: str
        """
        return self._filepath

    @filepath.setter
    def filepath(self, filepath):
        """Sets the filepath of this Database.

        File path of the database relative to the Domino data directory.  # noqa: E501

        :param filepath: The filepath of this Database.  # noqa: E501
        :type: str
        """

        self._filepath = filepath

    @property
    def replicaid(self):
        """Gets the replicaid of this Database.  # noqa: E501

        Replica ID of the database.  # noqa: E501

        :return: The replicaid of this Database.  # noqa: E501
        :rtype: str
        """
        return self._replicaid

    @replicaid.setter
    def replicaid(self, replicaid):
        """Sets the replicaid of this Database.

        Replica ID of the database.  # noqa: E501

        :param replicaid: The replicaid of this Database.  # noqa: E501
        :type: str
        """

        self._replicaid = replicaid

    @property
    def template(self):
        """Gets the template of this Database.  # noqa: E501

        File name of the design template of the database, or an empty string if the database does not have a design template.   # noqa: E501

        :return: The template of this Database.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this Database.

        File name of the design template of the database, or an empty string if the database does not have a design template.   # noqa: E501

        :param template: The template of this Database.  # noqa: E501
        :type: str
        """

        self._template = template

    @property
    def href(self):
        """Gets the href of this Database.  # noqa: E501

        The URL of the view list resource for the database.  # noqa: E501

        :return: The href of this Database.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Database.

        The URL of the view list resource for the database.  # noqa: E501

        :param href: The href of this Database.  # noqa: E501
        :type: str
        """

        self._href = href

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Database, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Database):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Database):
            return True

        return self.to_dict() != other.to_dict()
