# coding: utf-8

"""
    IBM Domino Data API

    The data API provides access to any database for which it is enabled. The API represents databases, views, view entries, and documents in JSON format.  **Important**: This version of the OpenAPI spec (**data.yaml**) includes data API changes from the XPages Extension Library release 9.0.1.v09_02. This  includes new operations on attachments, agents and forms.  If you are using a version before 9.0.1.v09_02, consider using an earlier version of the spec.   # noqa: E501

    OpenAPI spec version: 9.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dda.configuration import Configuration


class AgentJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_name': 'str',
        'synchronous': 'bool',
        'document_unid': 'str',
        'min_run_interval': 'int'
    }

    attribute_map = {
        'agent_name': 'agentName',
        'synchronous': 'synchronous',
        'document_unid': 'documentUnid',
        'min_run_interval': 'minRunInterval'
    }

    def __init__(self, agent_name=None, synchronous=None, document_unid=None, min_run_interval=None, _configuration=None):  # noqa: E501
        """AgentJob - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._agent_name = None
        self._synchronous = None
        self._document_unid = None
        self._min_run_interval = None
        self.discriminator = None

        if agent_name is not None:
            self.agent_name = agent_name
        if synchronous is not None:
            self.synchronous = synchronous
        if document_unid is not None:
            self.document_unid = document_unid
        if min_run_interval is not None:
            self.min_run_interval = min_run_interval

    @property
    def agent_name(self):
        """Gets the agent_name of this AgentJob.  # noqa: E501

        The name of the agent to execute.  # noqa: E501

        :return: The agent_name of this AgentJob.  # noqa: E501
        :rtype: str
        """
        return self._agent_name

    @agent_name.setter
    def agent_name(self, agent_name):
        """Sets the agent_name of this AgentJob.

        The name of the agent to execute.  # noqa: E501

        :param agent_name: The agent_name of this AgentJob.  # noqa: E501
        :type: str
        """

        self._agent_name = agent_name

    @property
    def synchronous(self):
        """Gets the synchronous of this AgentJob.  # noqa: E501

        `true` to execute the agent synchronously.   # noqa: E501

        :return: The synchronous of this AgentJob.  # noqa: E501
        :rtype: bool
        """
        return self._synchronous

    @synchronous.setter
    def synchronous(self, synchronous):
        """Sets the synchronous of this AgentJob.

        `true` to execute the agent synchronously.   # noqa: E501

        :param synchronous: The synchronous of this AgentJob.  # noqa: E501
        :type: bool
        """

        self._synchronous = synchronous

    @property
    def document_unid(self):
        """Gets the document_unid of this AgentJob.  # noqa: E501

        Optional UNID of a target document.  # noqa: E501

        :return: The document_unid of this AgentJob.  # noqa: E501
        :rtype: str
        """
        return self._document_unid

    @document_unid.setter
    def document_unid(self, document_unid):
        """Sets the document_unid of this AgentJob.

        Optional UNID of a target document.  # noqa: E501

        :param document_unid: The document_unid of this AgentJob.  # noqa: E501
        :type: str
        """

        self._document_unid = document_unid

    @property
    def min_run_interval(self):
        """Gets the min_run_interval of this AgentJob.  # noqa: E501

        Optional minimum run interval in seconds.  # noqa: E501

        :return: The min_run_interval of this AgentJob.  # noqa: E501
        :rtype: int
        """
        return self._min_run_interval

    @min_run_interval.setter
    def min_run_interval(self, min_run_interval):
        """Sets the min_run_interval of this AgentJob.

        Optional minimum run interval in seconds.  # noqa: E501

        :param min_run_interval: The min_run_interval of this AgentJob.  # noqa: E501
        :type: int
        """

        self._min_run_interval = min_run_interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AgentJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgentJob):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AgentJob):
            return True

        return self.to_dict() != other.to_dict()
